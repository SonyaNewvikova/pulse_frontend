{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for API requests - change in production\n// Используем переменную окружения или локальный адрес по умолчанию\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Настраиваем axios для работы с CORS\naxios.defaults.withCredentials = true;\n\n// Register or authenticate user\nexport const registerUser = async (telegramId, username) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/register/`, {\n      telegram_id: telegramId,\n      username: username\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error registering user:', error);\n    throw error;\n  }\n};\n\n// Send a chat message to AI\nexport const sendChatMessage = async (telegramId, message) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/chat/`, {\n      telegram_id: telegramId,\n      message: message\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    if (error.response) {\n      return error.response.data;\n    }\n    throw error;\n  }\n};\n\n// Save a message to diary\nexport const saveMessage = async messageId => {\n  try {\n    const response = await axios.post(`${API_URL}/api/save/`, {\n      message_id: messageId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error saving message:', error);\n    throw error;\n  }\n};\n\n// Get saved messages\nexport const getSavedMessages = async telegramId => {\n  try {\n    const response = await axios.get(`${API_URL}/api/saved/`, {\n      params: {\n        telegram_id: telegramId\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error getting saved messages:', error);\n    throw error;\n  }\n};\n\n// Get user status (access days and token limits)\nexport const getUserStatus = async telegramId => {\n  try {\n    const response = await axios.get(`${API_URL}/api/status/`, {\n      params: {\n        telegram_id: telegramId\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error getting user status:', error);\n    throw error;\n  }\n};\n\n// Submit feedback\nexport const submitFeedback = async (telegramId, message, voiceFile = null) => {\n  try {\n    const formData = new FormData();\n    formData.append('telegram_id', telegramId);\n    if (message) {\n      formData.append('message', message);\n    }\n    if (voiceFile) {\n      formData.append('voice_file', voiceFile);\n    }\n    const response = await axios.post(`${API_URL}/api/feedback/`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error submitting feedback:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","defaults","withCredentials","registerUser","telegramId","username","response","post","telegram_id","data","error","console","sendChatMessage","message","saveMessage","messageId","message_id","getSavedMessages","get","params","getUserStatus","submitFeedback","voiceFile","formData","FormData","append","headers"],"sources":["C:/Users/Артём/Documents/coding/Pulse/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for API requests - change in production\n// Используем переменную окружения или локальный адрес по умолчанию\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Настраиваем axios для работы с CORS\naxios.defaults.withCredentials = true;\n\n// Register or authenticate user\nexport const registerUser = async (telegramId, username) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/register/`, {\n      telegram_id: telegramId,\n      username: username\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error registering user:', error);\n    throw error;\n  }\n};\n\n// Send a chat message to AI\nexport const sendChatMessage = async (telegramId, message) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/chat/`, {\n      telegram_id: telegramId,\n      message: message\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    if (error.response) {\n      return error.response.data;\n    }\n    throw error;\n  }\n};\n\n// Save a message to diary\nexport const saveMessage = async (messageId) => {\n  try {\n    const response = await axios.post(`${API_URL}/api/save/`, {\n      message_id: messageId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error saving message:', error);\n    throw error;\n  }\n};\n\n// Get saved messages\nexport const getSavedMessages = async (telegramId) => {\n  try {\n    const response = await axios.get(`${API_URL}/api/saved/`, {\n      params: { telegram_id: telegramId }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error getting saved messages:', error);\n    throw error;\n  }\n};\n\n// Get user status (access days and token limits)\nexport const getUserStatus = async (telegramId) => {\n  try {\n    const response = await axios.get(`${API_URL}/api/status/`, {\n      params: { telegram_id: telegramId }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error getting user status:', error);\n    throw error;\n  }\n};\n\n// Submit feedback\nexport const submitFeedback = async (telegramId, message, voiceFile = null) => {\n  try {\n    const formData = new FormData();\n    formData.append('telegram_id', telegramId);\n    \n    if (message) {\n      formData.append('message', message);\n    }\n    \n    if (voiceFile) {\n      formData.append('voice_file', voiceFile);\n    }\n    \n    const response = await axios.post(`${API_URL}/api/feedback/`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error submitting feedback:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}