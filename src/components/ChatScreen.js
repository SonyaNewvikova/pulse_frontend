import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import ReactMarkdown from 'react-markdown';
import { sendChatMessage, saveMessage } from '../services/api';
import '../styles/ChatScreen.css';

const ChatScreen = ({ user }) => {
  const [messages, setMessages] = useState(() => {
    const savedMessages = localStorage.getItem('chatMessages');
    return savedMessages ? JSON.parse(savedMessages) : [];
  });
  const [input, setInput] = useState('');
  const [sending, setSending] = useState(false);
  const [error, setError] = useState(null);
  const [darkMode, setDarkMode] = useState(() => {
    const savedTheme = localStorage.getItem('darkMode');
    return savedTheme ? JSON.parse(savedTheme) : false;
  });
  const [showClearConfirm, setShowClearConfirm] = useState(false);
  const [sidebarVisible, setSidebarVisible] = useState(false);
  const messagesEndRef = useRef(null);
  const textareaRef = useRef(null);
  const navigate = useNavigate();
  
  useEffect(() => {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –∫–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (darkMode) {
      document.body.classList.add('dark-theme');
    } else {
      document.body.classList.remove('dark-theme');
    }
  }, [darkMode]);
  
  useEffect(() => {
    // Scroll to bottom when messages change
    scrollToBottom();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage
    localStorage.setItem('chatMessages', JSON.stringify(messages));
  }, [messages]);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
  useEffect(() => {
    if (textareaRef.current) {
      // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã—Å–æ—Ç—ã –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
      textareaRef.current.style.height = "44px";
      
      if (input.trim() === '') {
        // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
        return;
      }
      
      // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const scrollHeight = textareaRef.current.scrollHeight;
      textareaRef.current.style.height = Math.min(scrollHeight, 200) + "px";
    }
  }, [input]); // –ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ input
  
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  const toggleTheme = () => {
    const newValue = !darkMode;
    setDarkMode(newValue);
    localStorage.setItem('darkMode', JSON.stringify(newValue));
  };

  const clearChat = () => {
    setMessages([]);
    setShowClearConfirm(false);
    localStorage.removeItem('chatMessages');
  };
  
  const toggleSidebar = () => {
    setSidebarVisible(!sidebarVisible);
  };
  
  const handleSend = async () => {
    if (!input.trim() || sending) return;
    
    setInput('');
    setSending(true);
    setError(null);
    
    // Add user message to chat
    setMessages(prev => [...prev, { role: 'user', content: input }]);
    
    try {
      // Send message to AI
      const response = await sendChatMessage(user.telegram_id, input);
      
      // Check for errors
      if (response.error) {
        setError(response.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else {
        // Add AI response to chat
        setMessages(prev => [...prev, { 
          role: 'assistant', 
          content: response.message,
          messageId: response.message_id,
          saved: false
        }]);
      }
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    } finally {
      setSending(false);
    }
  };
  
  const handleSaveMessage = async (messageId, index) => {
    try {
      await saveMessage(messageId);
      
      // Update message state to reflect it's saved
      setMessages(prev => {
        const newMessages = [...prev];
        newMessages[index] = {
          ...newMessages[index],
          saved: true
        };
        return newMessages;
      });
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    }
  };
  
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };
  
  return (
    <div className={`chat-container ${darkMode ? 'dark-theme' : 'light-theme'}`}>
      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é */}
      <button 
        className="sidebar-toggle" 
        onClick={toggleSidebar}
        aria-label="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
      >
        ‚ò∞
      </button>
      
      <div className={`chat-sidebar ${sidebarVisible ? 'visible' : ''}`}>
        <div className="sidebar-header">
          <button className="new-chat-btn" onClick={() => setShowClearConfirm(true)}>
            <span>–ù–æ–≤—ã–π —á–∞—Ç</span>
          </button>
        </div>
        
        {showClearConfirm && (
          <div className="clear-chat-confirm">
            <p>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç? –ò–ò –Ω–µ –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.</p>
            <div className="confirm-buttons">
              <button onClick={() => setShowClearConfirm(false)}>–û—Ç–º–µ–Ω–∞</button>
              <button onClick={clearChat}>–û—á–∏—Å—Ç–∏—Ç—å</button>
            </div>
          </div>
        )}
        
        <div className="sidebar-footer">
          <button 
            className="saved-messages-btn"
            onClick={() => navigate('/saved')}
          >
            <span>–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</span>
          </button>
        </div>
      </div>
      
      <div className="chat-main">
        <div className="chat-header">
          <div className="header-left">
            <h2>–ü—É–ª—å—Å</h2>
          </div>
          {/* –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –µ—Å—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ */}
          <div className="header-actions">
            <button 
              className="theme-toggle"
              onClick={toggleTheme}
              title={darkMode ? "–í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É" : "–í–∫–ª—é—á–∏—Ç—å —Ç–µ–º–Ω—É—é —Ç–µ–º—É"}
            >
              {darkMode ? 'üåû' : 'üåô'}
            </button>
          </div>
        </div>
        
        <div className="chat-messages">
          {messages.length === 0 && (
            <div className="welcome-message">
              <h3>–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ —Å–¥–∞—Ç—å—Å—è</h3>
              <p>–Ø –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. –ù–∞–ø–∏—à–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ, –∏–ª–∏ –æ –∫–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.</p>
            </div>
          )}
          
          {messages.map((msg, index) => (
            <div key={index} className={`message ${msg.role}`}>
              <div className="message-avatar">
                {msg.role === 'user' ? 
                  <div className="user-avatar">–Ø</div> : 
                  <div className="assistant-avatar">–ò–ò</div>
                }
              </div>
              
              <div className="message-bubble">
                {msg.role === 'user' ? (
                  <div className="message-content">{msg.content}</div>
                ) : (
                  <div className="message-content markdown-content">
                    <ReactMarkdown>{msg.content}</ReactMarkdown>
                    
                    {!msg.saved ? (
                      <button 
                        className="save-message-btn"
                        onClick={() => handleSaveMessage(msg.messageId, index)}
                      >
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
                      </button>
                    ) : (
                      <span className="saved-indicator">‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ</span>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}
          
          {sending && (
            <div className="message assistant">
              <div className="message-avatar">
                <div className="assistant-avatar">–ò–ò</div>
              </div>
              <div className="message-bubble">
                <div className="loading-dots">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
          
          {error && <div className="error-message">{error}</div>}
          
          <div ref={messagesEndRef} />
        </div>
        
        <div className="chat-input-container">
          <div className="chat-input">
            <textarea
              ref={textareaRef}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              disabled={sending}
              rows="1"
            />
            <button 
              className="send-button"
              onClick={handleSend}
              disabled={sending || !input.trim()}
              title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
            >
              <svg width="30" height="30" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 4L12 20" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M5 13L12 20L19 13" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </button>
          </div>
          <div className="input-footer">
            –ò–ò –º–æ–∂–µ—Ç –¥–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatScreen;
